import "dart:math";
import "input_alt.dart";

void main(){
  // Partie 1
  int compteur = 0;
  for(int i = 0; i < paires.length ; i++){
    if (estBonSens(paires[i].p1, paires[i].p2)) {
      compteur+= i+1;
    }
  }
  print("Partie 1 : Total -> $compteur");

  // Partie 2
  // Conversion des paires en megaListe
  List<dynamic> megaListe = [];
  for(int i = 0; i < paires.length ; i++){
    megaListe.addAll([paires[i].p1, paires[i].p2]);
  }
  // Insertion des deux nouveaux packets (clés de décodages)
  megaListe.addAll([ [[2]], [[6]] ]);
  // Tri croissant de la megaListe
  triABulle(megaListe);

  //Recherche des positions des deux clés de décodages
  int pos2 = -1;
  int pos6 = -1;
  for(int i = 0 ; i < megaListe.length ; i++){
    if(megaListe[i] is List<List<int>>){
      int val = megaListe[i].first.first;
      if(val == 2){
        pos2 = i+1;
      }
      else if(val == 6){
        pos6 = i+1;
      }
      if(pos2 != -1 && pos6 !=-1){
        break;
      }
    }
  }
  print("Partie 2 : Clé de décodage -> ${pos2 * pos6}");
}

void triABulle(List<dynamic> liste) {
  int longueur = liste.length;
  for (int i = 0; i < longueur - 1; i++) {
    for (int j = 0; j < longueur - i - 1; j++) {
      if (!estBonSens(liste[j], liste[j + 1])){        
        var temp = liste[j];
        liste[j] = liste[j + 1];
        liste[j + 1] = temp;
      }
    }
  }
}

bool estBonSens(var gauche, var droite) {
  // Cas 1 : Si les deux valeurs sont des entiers, on les compare et on renvoie le résultat.
  if (gauche is int && droite is int) {
    return gauche < droite;
  }
  // Cas 2 : Si les deux valeurs sont des listes, on compare élément par élément.
  else if (gauche is List && droite is List) {
    int len = min(gauche.length, droite.length);
    for (int i = 0; i < len; i++) {
      if (estBonSens(gauche[i], droite[i])) {
        return true;
      }
      else if (estBonSens(droite[i], gauche[i])) {
        return false;
      }
    }
    return gauche.length < droite.length;
  }
  // Cas 3 : Si une seule valeur est un nombre entier, on la convertit en liste et on compare les listes.
  else {
    if (gauche is int) {
      gauche = [gauche];
    }
    else {
      droite = [droite];
    }
    return estBonSens(gauche, droite);
  }
}

